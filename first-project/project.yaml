project:
  name: "AnimeGoodsPR_Agent"
  purpose: |
    アニメグッズ販売ポータルサイト向けに、
    クライアントが公式URL（公式Xポスト、公式Webサイト）を貼り付けるだけで、
    公式URLの内容をスクレイピングしてテキストと画像を収集し、
    AI（GPT-4o）を用いてWordPressフォーマットの記事を生成し、
    WordPressに下書きとして自動投稿するサービスを開発する。
    サービスはサブスクリプションモデルで提供し、
    サービス権限（WordPress認証・API管理・AIキー）は開発側が保有し、
    クライアントはフロントエンドからサービスを利用するだけとする。

objectives:
  - URL入力から記事生成までをワンクリックで完了させる。
  - WordPressフォーマット（複数パターン）を反映した高品質なPR記事を自動生成する。
  - クライアントの作業負荷を極限まで減らす。
  - サービス利用時のインフラ・API管理はすべて開発側が行う。

technology_stack:
  programming_language: "Python 3.8+"
  frameworks:
    - "FastAPI (バックエンドAPI構築)"
    - "BeautifulSoup4 (静的スクレイピング)"
    - "Playwright (動的レンダリング対応)"
  AI_API:
    - "OpenAI GPT-4o (記事生成)"
  CMS_integration:
    - "WordPress REST API (Application Passwords)"
  frontend:
    - "HTMLまたはReact（URL入力フォームと利用状況表示）"
  dependencies:
    - "requests"
    - "python-dotenv"
    - "openai"
    - "pydantic"

article_generation:
  format_patterns:
    description: |
      クライアントが過去記事で使用している4〜5パターンのWordPress記事フォーマットをプロンプトに明示的に定義する。
      例として、以下のような要素を含める。
    example:
      - pattern_A:
          title: "<h1>記事タイトル</h1>"
          lead: "<p>リード文（50文字程度）</p>"
          headings: "<h2>見出し1</h2>"
          body: "<p>本文テキスト</p>"
          images: "<img src='画像URL'>"
          conclusion: "<p>まとめ・CTA</p>"
      - pattern_B:
          title: "<h1>記事タイトル</h1>"
          subheading: "<h3>サブヘッド</h3>"
          body: "<p>本文テキスト（段落分割）</p>"
          images: "<img src='画像URL'>"
  selection_method: |
    記事生成時にパターンA〜Dの中からランダムまたは指定で使用可能にする。
  prompt_guidelines:
    - "パターン例を必ずプロンプトに組み込む。"
    - "公式URLのスクレイピング結果（テキスト、画像URL）をAIに渡して生成する。"
    - "WordPress投稿用のHTMLフォーマットを遵守するように指示する。"

system_architecture:
  frontend:
    description: |
      クライアントはURLを貼り付けるだけのフォーム画面（HTMLまたはReact）を使用し、
      記事生成ボタンを押すとバックエンドAPIを呼び出す。
      クライアントはWordPress認証やAPIキーを持たず、サービス提供側（開発側）が一元管理する。
  backend:
    description: |
      FastAPIを使用して以下の機能を提供する。
    endpoints:
      - POST /generate-article:
          description: |
            入力されたURLを受け取り、以下の処理を実行する。
            1) BeautifulSoupでテキスト・画像取得
            2) AI記事生成（OpenAI API呼び出し）
            3) WordPress REST APIで下書き投稿
            4) 投稿結果をJSONで返す（記事ID、ステータス）
  modules:
    scraping:
      description: |
        BeautifulSoup（動的ページならPlaywright）を使ってURLからテキスト・画像URLを抽出。
        公式Xポストや公式サイトの内容を取得する。
    ai_generation:
      description: |
        取得データ（テキスト、画像URL）をプロンプトに組み込み、GPT-4oで記事を生成。
        WordPressフォーマットを遵守したHTMLを生成する。
    wordpress_posting:
      description: |
        WordPress REST API（Application Passwords）で開発側の権限で下書き投稿する。
        クライアントはWordPress権限やAPIキーを持たず、開発側が一元管理する。
  error_handling:
    - "URLが無効の場合の例外処理"
    - "スクレイピング失敗時のフォールバック（例: 代替テキスト）"
    - "AI生成失敗時のリトライ処理"
    - "WordPress投稿失敗時のエラーログ"

security:
  api_key_management:
    description: |
      OpenAI APIキーやWordPress認証情報はすべて開発側で一元管理し、
      クライアント側には渡さない。
  service_access_control:
    description: |
      サービス利用には認証（例: メールアドレス・パスワード、APIトークン）を実装し、
      クライアントごとの利用制限や利用状況管理を行う。

output:
  deliverables:
    - "Pythonスクリプト一式（モジュール化）"
    - "requirements.txt"
    - ".env（APIキー設定）"
    - "操作マニュアル（URL入力からWordPress下書きまで）"
  testing:
    - "URL入力→AI記事生成→WordPress下書き投稿まで一連テスト済み"
    - "WordPressフォーマットA〜Dの出力検証済み"

